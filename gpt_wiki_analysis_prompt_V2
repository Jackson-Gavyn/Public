import requests
from bs4 import BeautifulSoup
import pandas as pd
import openai

# Set up the OpenAI API key from environment variable
api_key = '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'
openai.api_key = api_key

# Fetch and parse table data
url = 'https://starcitizen.tools/List_of_pledge_vehicles'
response = requests.get(url)

# Define the column options
column_options = {
    1: "Name",
    2: "Manufacturer",
    3: "Role",
    4: "Standalone cost",
    5: "Availability",
    6: "Status",
    7: "Loaner"
}

if response.status_code == 200:
    html_content = response.text
else:
    print("Failed to fetch the webpage.")

soup = BeautifulSoup(html_content, 'html.parser')
table = soup.find('table', class_='plain-table floatnone wikitable sortable')

headers = []
for th in table.find_all('th'):
    headers.append(th.text.strip())

table_data = []
for row in table.find_all('tr')[1:]:
    rowData = {}
    for i, cell in enumerate(row.find_all('td')):
        rowData[headers[i]] = cell.text.strip()
    table_data.append(rowData)

# Create a DataFrame with the table data
df = pd.DataFrame(table_data)

# Function to prompt GPT-3 with a question about which columns are relevant
def get_relevant_columns(question, column_options):
    data_description = ("The data is a table of ships with the following columns:\n"
                        "1. Name: The name of the ship (e.g., Hammerhead)\n"
                        "2. Manufacturer: The company that makes the ship (e.g., Origin makes the 600i ship)\n"
                        "3. Role: The job or field the ship fills (e.g., The Avenger Stalker's role is interdiction)\n"
                        "4. Standalone cost: The cost of the ship in US dollars (e.g., The Avenger Stalker costs 60 dollars)\n"
                        "5. Availability: Whether the ship can be purchased anytime or is available during time-limited sales (e.g., The Avenger Warlock is time limited on sale)\n"
                        "6. Status: The current state of the ship, such as whether it is flyable or still in development (e.g., The Avenger Stalker is flight ready!)\n"
                        "7. Loaner: An additional ship provided to the buyer as a temporary replacement when purchasing the ship (e.g., The Polaris comes with a loaner that is a Hammerhead)")

    prompt = f"Which columns are relevant for the following question: {question}\n\nColumn options: {column_options.values()}\n\n{data_description}\n\nRelevant columns:"

    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=100,
        n=1,
        stop=None,
        temperature=0.6,
    )

    # Convert the response to a list of relevant columns
    relevant_columns = []
    for choice in response.choices:
        choice_text = choice.text.strip()
        for num, column in column_options.items():
            if column in choice_text:
                relevant_columns.append(num)
                return relevant_columns
# Function to prompt GPT-3 with a question about the data
# Function to prompt GPT-3 with a question about the data
def ask_gpt(question, data, relevant_columns):
    # Filter the DataFrame to keep only the relevant columns
    relevant_data = data.iloc[:, relevant_columns]

    prompt = f"Provide Python code to filter the following DataFrame based on the question: {question}\n\nData:\n{relevant_data.to_string(index=False)}\n\nCode:"

    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=100,
        n=1,
        stop=None,
        temperature=0.6,
    )

    code = response.choices[0].text.strip()
    return code

# Get user's question
user_question = input("Please enter your question: ")

# Ask GPT-3 which columns are relevant
relevant_columns = get_relevant_columns(user_question, column_options)

# Print out the relevant columns
print("The relevant columns for your question are:")
for column in relevant_columns:
    print(column_options[column])

# Ask GPT-3 the user's question with the relevant columns only and get the filtering code
filtering_code = ask_gpt(user_question, df, relevant_columns)
print("Filtering code received from GPT-3:", filtering_code)

# Execute the filtering code
filtered_data = df.loc[df['Name'].str.startswith('H')]

# Display the filtered DataFrame
print(filtered_data.to_string(index=False))
